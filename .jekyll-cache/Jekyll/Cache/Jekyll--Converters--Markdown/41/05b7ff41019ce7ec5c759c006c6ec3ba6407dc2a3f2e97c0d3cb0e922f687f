I"$V<!--page-->
<h1 id="mvc-구조-실습">MVC 구조 실습</h1>
<p>본격적으로 MVC구조에 대한 실습을 해보려고 한다.
이 구조에 대해 이전 Post에서도 나름 작성한 것을 게시해보았지만,
구조에 대한 미흡한 부분도 많고, 조금 더 뚜렷하게 해보자는 마음으로 새롭게 구현해보려고 한다.</p>

<p>다음 사진은 잘 작아서 보이지 않겠지만, MVC구조를 가지고 interface와 사용자 정의 exception을 포함하여
구현하려는 전체적인 내용이다.</p>

<p><img src="https://user-images.githubusercontent.com/68142821/108051836-b2a8b580-708e-11eb-95f1-c753abeff4ee.png" alt="boardClassDiagram" /></p>

<h2 id="model">Model</h2>
<p>직접 만들어보면서 이해하게 된 내용은 이렇다.</p>

<p>사용자로부터 입력을 받아 Controller에서 정리를 해주고, Controller는 사용자의 요청을 수행할 수 있는 기능을 가진 장소를 선택한다. 즉, Model은 Controller로부터 받은 요청을 수행할 수 있는 단계이다. 그렇기 때문에 역할을 수행할 수 있는 <strong>모든 정보와 데이터</strong>를 갖고 있어야 한다는 것이다.</p>

<p>또한 실질적인 기능을 수행하는 부분이라 View나 Controller보다 먼저 구현하는 것이 편했다.</p>

<p>나는 Map을 활용해서 게시글을 올리는 연습을 할 것이며,
게시글에 대한 정보는 ‘이미지를 올릴 수 있는 게시판’, ‘첨부 파일을 올릴 수 있는 게시판’으로 나누어 사용자에게 제공해 줄 것이다.</p>

<p>게시물에 대한 정보를 저장할 수 있는 Class를 Board라고 지정하고,
ArchiveBoard와 PhotoBoard가 Board를 상속할 수 있도록 한다.</p>

<h3 id="boardjava">Board.java</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Board</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">no</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">writer</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">content</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">date</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">Board</span><span class="o">()</span> <span class="o">{}</span>
	<span class="kd">public</span> <span class="nf">Board</span><span class="o">(</span><span class="kt">int</span> <span class="n">no</span><span class="o">,</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">String</span> <span class="n">writer</span><span class="o">,</span> <span class="nc">String</span> <span class="n">content</span><span class="o">,</span> <span class="nc">String</span> <span class="n">date</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">();</span>
		<span class="k">this</span><span class="o">.</span><span class="na">no</span> <span class="o">=</span> <span class="n">no</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">writer</span> <span class="o">=</span> <span class="n">writer</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">date</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getNo</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">no</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setNo</span><span class="o">(</span><span class="kt">int</span> <span class="n">no</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">no</span> <span class="o">=</span> <span class="n">no</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getSubject</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">subject</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSubject</span><span class="o">(</span><span class="nc">String</span> <span class="n">subject</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">subject</span> <span class="o">=</span> <span class="n">subject</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getWriter</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">writer</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setWriter</span><span class="o">(</span><span class="nc">String</span> <span class="n">writer</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">writer</span> <span class="o">=</span> <span class="n">writer</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getContent</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">content</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setContent</span><span class="o">(</span><span class="nc">String</span> <span class="n">content</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getDate</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">date</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setDate</span><span class="o">(</span><span class="nc">String</span> <span class="n">date</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">date</span> <span class="o">=</span> <span class="n">date</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="s">"번호 : "</span> <span class="o">+</span> <span class="n">no</span> <span class="o">+</span> <span class="s">", 제목 : "</span> <span class="o">+</span> <span class="n">subject</span> <span class="o">+</span>
				<span class="s">", 작성자 : "</span> <span class="o">+</span> <span class="n">writer</span> <span class="o">+</span> <span class="s">", 내용 : "</span> <span class="o">+</span> <span class="n">content</span> <span class="o">+</span> <span class="s">", 날짜 : "</span><span class="o">+</span> <span class="n">date</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="archiveboardjava">ArchiveBoard.java</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArchiveBoard</span> <span class="kd">extends</span> <span class="nc">Board</span><span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">fileName</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">fileSize</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">ArchiveBoard</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
	<span class="kd">public</span> <span class="nf">ArchiveBoard</span><span class="o">(</span><span class="kt">int</span> <span class="n">no</span><span class="o">,</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">String</span> <span class="n">writer</span><span class="o">,</span> <span class="nc">String</span> <span class="n">content</span><span class="o">,</span> <span class="nc">String</span> <span class="n">date</span><span class="o">,</span> <span class="nc">String</span> <span class="n">fileName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">fileSize</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">no</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">writer</span><span class="o">,</span> <span class="n">content</span><span class="o">,</span> <span class="n">date</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">fileSize</span> <span class="o">=</span> <span class="n">fileSize</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getFileName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">fileName</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFileName</span><span class="o">(</span><span class="nc">String</span> <span class="n">fileName</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">int</span> <span class="nf">getFileSize</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">fileSize</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setFileSize</span><span class="o">(</span><span class="kt">int</span> <span class="n">fileSize</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">fileSize</span> <span class="o">=</span> <span class="n">fileSize</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">", 첨부파일 이름 : "</span> <span class="o">+</span> <span class="n">fileName</span> <span class="o">+</span> <span class="s">", 파일 용량 : "</span> <span class="o">+</span> <span class="n">fileSize</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="photoboardjava">PhotoBoard.java</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhotoBoard</span> <span class="kd">extends</span> <span class="nc">Board</span><span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">imgName</span><span class="o">;</span>
	<span class="nc">Object</span> <span class="n">obj</span><span class="o">;</span>
	
	<span class="kd">public</span> <span class="nf">PhotoBoard</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
	<span class="kd">public</span> <span class="nf">PhotoBoard</span><span class="o">(</span><span class="kt">int</span> <span class="n">no</span><span class="o">,</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">String</span> <span class="n">writer</span><span class="o">,</span> <span class="nc">String</span> <span class="n">content</span><span class="o">,</span> <span class="nc">String</span> <span class="n">date</span><span class="o">,</span> <span class="nc">String</span> <span class="n">imgName</span><span class="o">)</span> <span class="o">{</span>
		<span class="kd">super</span><span class="o">(</span><span class="n">no</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">writer</span><span class="o">,</span> <span class="n">content</span><span class="o">,</span> <span class="n">date</span><span class="o">);</span>
		<span class="k">this</span><span class="o">.</span><span class="na">imgName</span> <span class="o">=</span> <span class="n">imgName</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getImgName</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="n">imgName</span><span class="o">;</span>
	<span class="o">}</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">setImgName</span><span class="o">(</span><span class="nc">String</span> <span class="n">imgName</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">imgName</span> <span class="o">=</span> <span class="n">imgName</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">", 이미지 이름 : "</span> <span class="o">+</span> <span class="n">imgName</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>여기까지가 DTO에 대한 작업이라고 볼 수 있겠다.
DTO에 대한 형식은 항상 하는 작업이라 철자만 틀리지 않으면 어렵지 않게 넘어가는 것 같다.</p>

<p>다음은 Service에 대한 부분이다.
이 프로그램에 대한 전체적인 기능을 수행하고, 예외 지정, 던지기 등 가장 머리를 써야 하는 부분이다.
Service는 먼저 interface를 구현하여 앞으로 사용할 메소드를 정의하는 부분을 넣어주었다.
다음은 Service에 대한 부분이다.
이 프로그램에 대한 전체적인 기능을 수행하고, 예외 지정, 던지기 등 가장 머리를 써야 하는 부분이다.
Service는 먼저 interface를 구현하여 앞으로 사용할 메소드를 정의하는 부분을 넣어주었다.</p>
<h3 id="servicejavainterface">Service.java(interface)</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * 모든 게시판이 공통으로 사용하게 될 Service
 * (Business Logic)
 * */</span>

<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">kosta.exam.dto.Board</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">kosta.exam.exception.DuplicateException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">kosta.exam.exception.InexistentException</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">BoardService</span> <span class="o">{</span>
   <span class="cm">/**
    *   모든 게시물 검색
    *   @return : 게시판 유형에 따른 모든 게시물 정보를 Map의 형태로 리턴
    *   @throws : 게시물이 한개도 존재 하지 않는다면 InexistentException 예외가
    *             발생한다.
    * */</span>
	<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Board</span><span class="o">&gt;&gt;</span> <span class="nf">getBoardList</span><span class="o">()</span><span class="kd">throws</span> <span class="nc">InexistentException</span><span class="o">;</span>
	
	<span class="cm">/**
	 *게시판의유형(Kind)에 따른 게시물 검색하기
	 *  @return kind에 해당하는 전체게시물 Map으로 리턴
	 *  @param :  게시물유형에 따른 key를 인수로 전달받는다.
	 *  @throws : kind에 해당하는 게시물이 한개도 없을 때 InexistentException 예외 발생
	 * */</span>
	<span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Board</span><span class="o">&gt;</span> <span class="nf">getBoardByKind</span><span class="o">(</span><span class="nc">String</span> <span class="n">kind</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">InexistentException</span><span class="o">;</span>
	
	<span class="cm">/**
	 *  게시물 유형에서 글번호에 해당하는 게시물 한개를 검색
	 * @return 게시물 정보 한개를 Board 형태로 리턴
	 * @param kind는 게시물 유형, no는 게시물 글번호
	 * @throws 검색하는 게시물이 없으면 InexistentException 예외발생
	 * */</span>
	<span class="nc">Board</span> <span class="nf">getBoardByNo</span><span class="o">(</span><span class="nc">String</span> <span class="n">kind</span><span class="o">,</span> <span class="kt">int</span> <span class="n">no</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">InexistentException</span><span class="o">;</span>
	
	<span class="cm">/**
	 *  게시물 등록하기
	 *  @return : true이면  등록성공, false이면 등록실패
	 *  @param : kind는 추가할 게시판유형, board는 추가할 게시물의 정보
	 *  @throws: 등록하기 전에 글번호 중복을 체크해서 중복이면 DuplicateException발생
	 *           등록을 실패하면  InexistentException 발생
	 * */</span>
	<span class="kt">boolean</span> <span class="nf">insertBoard</span><span class="o">(</span><span class="nc">String</span> <span class="n">kind</span><span class="o">,</span> <span class="nc">Board</span> <span class="n">board</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">DuplicateException</span><span class="o">,</span> <span class="nc">InexistentException</span><span class="o">;</span>

        <span class="cm">/**
         * 5. 등록전에 번호 중복여부 체크 하는 기능
         *    @return : true이면 중복, false이면 중복아님.
         *    @param : kind의 게시판의 유형, no는 글번호
         * */</span>
	<span class="kt">boolean</span> <span class="nf">duplicateByNo</span><span class="o">(</span><span class="nc">String</span> <span class="n">kind</span><span class="o">,</span> <span class="kt">int</span> <span class="n">no</span><span class="o">);</span>
	
	<span class="cm">/**
	 * 6. 게시물 삭제하기
	 *  @return : true이면 삭제성공, false이면 삭제실패
	 *  @param : kind의 게시판의 유형, no는 글번호
	 *  @throws : 삭제가 되지 않으면 InexistentException 예외 발생.
	 * */</span>
	<span class="kt">boolean</span> <span class="nf">deleteBoard</span><span class="o">(</span><span class="nc">String</span> <span class="n">kind</span><span class="o">,</span> <span class="kt">int</span> <span class="n">no</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">InexistentException</span><span class="o">;</span>
	
	<span class="cm">/**
	 * 7. 게시물 수정하기
	 *     공통 : 제목, 작성자, 내용
	 *     photo : imgName
	 *     archive : fileName, fileSize
	 *     
	 * @param : board는 수정할 게시물의 정보, kind는 수정될 게시물이있는 게시판의유형
	 * @throws: 수정되지 않으면 InexistentException 예외발생
	 * */</span>
	<span class="kt">boolean</span> <span class="nf">updateBoard</span><span class="o">(</span><span class="nc">Board</span> <span class="n">board</span><span class="o">,</span> <span class="nc">String</span> <span class="n">kind</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">InexistentException</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
:ET